/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/eltruforce.glb
*/

import React, { useEffect, useRef, useState } from 'react'
import { useGLTF, useAnimations, useTexture } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'

interface Props {
  activeAnimation: boolean
}

export function Model(props: Props) {
  const { activeAnimation } = props
  const group = useRef() as any
  const texture = useTexture('/download.png')
  const data = useGLTF('/eltruforce.glb') as any
  const { nodes, materials, animations } = data

  const { actions, names } = useAnimations(animations, group)

  const stripe = useRef() as any
  const stripe2 = useRef() as any
  const light = useRef() as any

  const rainbowColor = (t: number) => {
    t *= 0.5
    if (t < 1 / 10) {
      return [1, t * 10, 0]
    } else if (t < 2 / 10) {
      return [(2 / 10 - t) * 10, 1, 0]
    } else if (t < 3 / 10) {
      return [0, 1, (t - 2 / 10) * 10]
    } else if (t < 4 / 10) {
      return [0, (4 / 10 - t) * 10, 1]
    } else if (t < 5 / 10) {
      return [(t - 4 / 10) * 10, 0, 1]
    } else if (t < 6 / 10) {
      return [1, 0, (6 / 10 - t) * 10]
    } else if (t < 7 / 10) {
      return [(t - 6 / 10) * 10, 1, 0]
    } else if (t < 8 / 10) {
      return [1, (8 / 10 - t) * 10, 0]
    } else if (t < 9 / 10) {
      return [0, 1, (t - 8 / 10) * 10]
    } else {
      return [0, (1 - t) * 10, 1]
    }
  }

  useEffect(() => {
    actions[names[0]].reset().fadeIn(0.5).play()
  }, [])

  useFrame(state => {
    if (!activeAnimation) return

    const t = (1 + Math.sin(state.clock.elapsedTime * 0.5)) / 2

    stripe.current.color.setRGB(
      rainbowColor(t)[0],
      rainbowColor(t)[1],
      rainbowColor(t)[2]
    )
    stripe2.current.color.setRGB(
      rainbowColor(t)[0],
      rainbowColor(t)[1],
      rainbowColor(t)[2]
    )

    light.current.intensity = 0.1 * (1 + t * 2)
    // console.log(activeAnimation)
  })

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group
          name="Armature"
          // position={[-0.01, -0.14, 0.1]}
          // rotation={[-0.11, -0.73, 0]}
        >
          <primitive object={nodes.Hips} />
          <skinnedMesh
            castShadow
            name="R_Arm"
            geometry={nodes.R_Arm.geometry}
            material={materials.material_atlas_63611_1}
            skeleton={nodes.R_Arm.skeleton}
          >
            {activeAnimation ? (
              <>
                <meshStandardMaterial
                  ref={stripe}
                  toneMapped={false}
                  map={texture}
                  map-flipY={false}
                  skinning
                />
                <pointLight ref={light} intensity={1} distance={2.5} />
              </>
            ) : (
              <meshStandardMaterial
                map={texture}
                map-flipY={false}
                color={[1, 1, 1]}
                skinning
              />
            )}
          </skinnedMesh>
          <group name="Body">
            <skinnedMesh
              castShadow
              name="HandMesh_L_m053"
              geometry={nodes.HandMesh_L_m053.geometry}
              material={materials.material_atlas_63611_1}
              skeleton={nodes.HandMesh_L_m053.skeleton}
              morphTargetDictionary={
                nodes.HandMesh_L_m053.morphTargetDictionary
              }
              morphTargetInfluences={
                nodes.HandMesh_L_m053.morphTargetInfluences
              }
            >
              {activeAnimation ? (
                <>
                  <meshStandardMaterial
                    ref={stripe2}
                    toneMapped={false}
                    map={texture}
                    map-flipY={false}
                    skinning
                  />
                  <pointLight ref={light} intensity={1} distance={2.5} />
                </>
              ) : (
                <meshStandardMaterial
                  map={texture}
                  map-flipY={false}
                  color={[1, 1, 1]}
                  skinning
                />
              )}
            </skinnedMesh>
            <skinnedMesh
              castShadow
              name="HandMesh_L_m053_1"
              geometry={nodes.HandMesh_L_m053_1.geometry}
              material={materials.Face}
              skeleton={nodes.HandMesh_L_m053_1.skeleton}
              morphTargetDictionary={
                nodes.HandMesh_L_m053_1.morphTargetDictionary
              }
              morphTargetInfluences={
                nodes.HandMesh_L_m053_1.morphTargetInfluences
              }
            >
              <meshStandardMaterial map={texture} map-flipY={false} skinning />
            </skinnedMesh>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/eltruforce.glb')
